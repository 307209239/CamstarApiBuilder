// Decompiled with JetBrains decompiler
// Type: Camstar.WCF.ObjectStack.TxnDetailsChanges_Environment
// Assembly: Camstar.WCFClient, Version=7.7.7004.31021, Culture=neutral, PublicKeyToken=null
// MVID: CA19AA1B-EA44-4AB0-A5CC-92D7FB49DA91
// Assembly location: E:\WCFServicesGenerator\Camstar.WCFClient.dll

using System;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;

namespace Camstar.WCF.ObjectStack
{
  [DataContract(Namespace = "Camstar.WCF.ObjectStack")]
  [Serializable]
  public class TxnDetailsChanges_Environment : SubentityChanges_Environment
  {
    [Metadata("Changes CDO for TxnDetails.", "TxnDetailsChanges", false, false, false, "SubentityRef", 1049321, false, false, false, null)]
    [DataMember(EmitDefaultValue = false, Name = "TxnDetailsChanges_Environment_ListItemToChange")]
    protected new Environment _ListItemToChange;
    [Metadata("Numeric Option", "", false, false, false, "Integer", 1048909, false, false, false, null)]
    [DataMember(EmitDefaultValue = false, Name = "TxnDetailsChanges_Environment_TxnType")]
    protected Environment _TxnType;
    [Metadata("A Container Level is the tracking designation assigned to a container. The level identifies the position of the container within a container structure. A container is defined within InSite as a discrete collection of products produced in a factory. \r\n\r\nEach container has a unique identifier used for traceability and performance of shop floor transactions. Commonly used level names are batch and lot. Container Levels are defined to meet the specific requirements of each company. Examples of some industry-specific levels are roll, bin, and cassette. \r\nMany companies also track smaller levels within the larger, parent container. With InSite, this is accomplished through multi-level tracking. Parent and child level containers are associated using the Associate, Combine or Group Start transactions. For example, a group of containers can have a parent with a batch level and associated child containers with tray levels. Container groups can also have more than two levels.", "ContainerLevel", false, false, false, "NamedObjectRef", 1048742, false, false, true, null)]
    [DataMember(EmitDefaultValue = false, Name = "TxnDetailsChanges_Environment_ToContainerLevel")]
    protected Environment _ToContainerLevel;
    [Metadata("Unique name for this instance", "", false, false, false, "String", 1048741, false, false, false, null)]
    [DataMember(EmitDefaultValue = false, Name = "TxnDetailsChanges_Environment_ToContainerName")]
    protected Environment _ToContainerName;
    [DataMember(EmitDefaultValue = false, Name = "TxnDetailsChanges_Environment_ToContainerOption")]
    [Metadata("Numeric Option", "", false, false, false, "Integer", 1048743, false, false, false, null)]
    protected Environment _ToContainerOption;
    [Metadata("This is not implemented in the current version of InSite.\r\n\r\nTransaction details are used to define the type of processing (transaction type) required to \"move-down\" a Path. This is used to define, for example, whether a Move or a Combine transaction is to be used. Each Path has an associated Transaction Details entry. This is used when the Path is selected directly. Bins and other entities that can be used to select a Path also have their own associated Transaction Details (which overrides the Transaction Details for the Path).", "TxnDetails", false, false, false, "SubentityRef", 1048682, false, false, false, null)]
    [DataMember(EmitDefaultValue = false, Name = "TxnDetailsChanges_Environment_ObjectToChange")]
    protected new Environment _ObjectToChange;
    [Metadata("Every Container has an associated Owner Code. The owner code is used as a grouping to separate Containers for inquiry and processing. Examples of Owner Code are \"Manufacturing\", \"Engineering\", \"Prototypes\", \"SalesSamples\", etc.", "Owner", false, false, false, "NamedObjectRef", 1048738, false, false, true, null)]
    [DataMember(EmitDefaultValue = false, Name = "TxnDetailsChanges_Environment_NewOwner")]
    protected Environment _NewOwner;
    [Metadata("An instance of a Process Rework Code is used to provide a list of reasons for Process Rework. The code is associated with a Container when it enters a rework loop. It is then associated with all throughput transactions generated by the container while it is in the rework loop. This provides, for example, a means of differentiating between first pass and rework throughput in reporting.\r\n", "ReworkReason", false, false, false, "NamedObjectRef", 1048740, false, false, true, null)]
    [DataMember(EmitDefaultValue = false, Name = "TxnDetailsChanges_Environment_ReworkReason")]
    protected Environment _ReworkReason;
    [Metadata("Determines if changes are allowed to this instance (or any of its revisions)", "", false, false, true, "Boolean", 1048680, false, false, false, "0")]
    [DataMember(EmitDefaultValue = false, Name = "TxnDetailsChanges_Environment_IsFrozen")]
    protected Environment _IsFrozen;

    public new Environment ListItemToChange
    {
      [param: In] set
      {
        this.PropertySet(nameof (ListItemToChange), (object) value);
      }
      get
      {
        return (Environment) this.PropertyGet(nameof (ListItemToChange));
      }
    }

    public Environment TxnType
    {
      [param: In] set
      {
        this.PropertySet(nameof (TxnType), (object) value);
      }
      get
      {
        return (Environment) this.PropertyGet(nameof (TxnType));
      }
    }

    public Environment ToContainerLevel
    {
      [param: In] set
      {
        this.PropertySet(nameof (ToContainerLevel), (object) value);
      }
      get
      {
        return (Environment) this.PropertyGet(nameof (ToContainerLevel));
      }
    }

    public Environment ToContainerName
    {
      [param: In] set
      {
        this.PropertySet(nameof (ToContainerName), (object) value);
      }
      get
      {
        return (Environment) this.PropertyGet(nameof (ToContainerName));
      }
    }

    public Environment ToContainerOption
    {
      [param: In] set
      {
        this.PropertySet(nameof (ToContainerOption), (object) value);
      }
      get
      {
        return (Environment) this.PropertyGet(nameof (ToContainerOption));
      }
    }

    public new Environment ObjectToChange
    {
      [param: In] set
      {
        this.PropertySet(nameof (ObjectToChange), (object) value);
      }
      get
      {
        return (Environment) this.PropertyGet(nameof (ObjectToChange));
      }
    }

    public Environment NewOwner
    {
      [param: In] set
      {
        this.PropertySet(nameof (NewOwner), (object) value);
      }
      get
      {
        return (Environment) this.PropertyGet(nameof (NewOwner));
      }
    }

    public Environment ReworkReason
    {
      [param: In] set
      {
        this.PropertySet(nameof (ReworkReason), (object) value);
      }
      get
      {
        return (Environment) this.PropertyGet(nameof (ReworkReason));
      }
    }

    public Environment IsFrozen
    {
      [param: In] set
      {
        this.PropertySet(nameof (IsFrozen), (object) value);
      }
      get
      {
        return (Environment) this.PropertyGet(nameof (IsFrozen));
      }
    }
  }
}
